package ru.art0.finhelper.components

import ru.art0.finhelper.models._

import scala.util.Try

trait BalanceCalculator {
  def calculateBalances(records: Seq[Record]): Seq[CalculatorResultItem]
  def generateDeltaOpt(record: Record, purse: Purse, balances: BalancesMap): Option[RecordWithSnapshot]
}

trait BalanceCalculatorComponent {
  def balanceCalculator: BalanceCalculator
}

class BalanceCalculatorImpl extends BalanceCalculator {
  this: ConfigurationComponent =>

  override def calculateBalances(records: Seq[Record]): Seq[CalculatorResultItem] = {
    val balances = new BalancesMap

    val unflattedSeq =
      for (record <- records) yield {
        Try {

          val deltas =
            Seq(
              generateDeltaOpt(record, record.srcPurse, balances).map(d => Right(d)),
              record.dstPurse.flatMap(generateDeltaOpt(record, _, balances).map(d => Right(d)))
            ).flatten

          if (record.`type` == RecordType.Balance) {
            balances.initPurse(record.srcPurse, record.amount, record.currency)
          } else if (record.`type` == RecordType.Transfer) {
            balances.subtractPurseBalance(record.srcPurse, record.amount, record.currency)
            balances.subtractPurseBalance(record.dstPurse.get, -record.amount, record.currency)
          } else {
            balances.subtractPurseBalance(record.srcPurse, record.amount, record.currency)
          }

          deltas ++ Seq(Right(RecordWithSnapshot(record, balances.getSnapshot)))
        }.recover {
          case e => Seq(Left(e.getMessage))
        }.get
      }

    unflattedSeq.flatten
  }

  override def generateDeltaOpt(record: Record, purse: Purse, balances: BalancesMap): Option[RecordWithSnapshot] = {
    val isSrcBalance = record.srcPurse == purse
    val knownBalanceOpt = if (isSrcBalance) record.srcBalance else record.dstBalance
    val correctedAmount = if (isSrcBalance) record.amount else -record.amount

    knownBalanceOpt.fold(Option.empty[RecordWithSnapshot]) { knownBalance =>
      val deltaRecord = record.copy(
        `type` = RecordType.Delta,
        category = config.deltaCategories.head,
        srcPurse = purse,
        dstPurse = None,
        comment = "Autogenerated delta",
        srcBalance = None,
        dstBalance = None,
        amount = balances.getBalance(purse).fold(sys.error(s"""Unexpected purse: "$purse" """)) { prevBalance =>
          prevBalance.amount - knownBalance - correctedAmount
        }
      )

      balances.subtractPurseBalance(purse, deltaRecord.amount, deltaRecord.currency)

      if (deltaRecord.amount != 0) {
        Some(RecordWithSnapshot(deltaRecord, balances.getSnapshot))
      } else {
        None
      }
    }
  }
}